# This rule will create multiple runs of cellSNP and vireoSNP for each sample
# Provided a file that contains multiple vcfs per each sample
# present as config['phe_demux_pipeline']['vcf_info']

def read_files_ext(fname) -> pd.DataFrame :
    if not os.path.isfile(fname):
        raise OSError(f"The given file {fname} doesn't exist and annotations are impossible without this file!") 
    if fname.endswith('.csv'):
        return pd.read_csv(fname)
    elif fname.endswith('.tsv'):
        return pd.read_csv(fname, sep='\t')
    else:
        raise OSError(f"The given file {fname} doen't have either csv or tsv extension. Other extensions are not supported!")


def get_donors(wildcards, input):
    # temp_df = pd.read_csv(config['meta_data_geno_samp'], skiprows=1, names=config['hash_columns'])
    # donors = ','.join(temp_df.loc[temp_df[config['hash_columns'][2]] == wildcards.id1[:-6], config['hash_columns'][1]].to_list())
    # Dictionary containing keys 'donor' - number of donors and 'vcf' - a vcf file or a list of vcf files using which we want to run
    vals=dict.fromkeys(['donor', 'vcf'])
    temp_df = read_files_ext(config['phe_demux_pipeline']['vcf_info'])
    wet_lab_df = read_files_ext(config['wet_lab_info'])
    samp=wildcards.id1.replace('-', '_')+'_cDNA'
    cols1=config['phe_demux_pipeline']['vcf_info_columns']
    cols2=config['phe_demux_pipeline']['wet_lab_file_cols']
    set_num=wet_lab_df.loc[wet_lab_df[cols2[1]].str.lower() == samp.lower(), cols2[0]].values[0]
    vals['donor'] = temp_df.loc[temp_df[cols1[0]] == set_num, cols1[1]].values[0]
    vals['vcf'] = temp_df.loc[temp_df[cols1[0]] == set_num, wildcards.vcf_type].values[0]

    return vals


def multi_vcfs(wildcards):
    temp_df = read_files_ext(config['phe_demux_pipeline']['vcf_info'])
    wet_lab_df = read_files_ext(config['wet_lab_info'])
    samp=wildcards.id1.replace('-', '_')+'_cDNA'
    cols1=config['phe_demux_pipeline']['vcf_info_columns']
    cols2=config['phe_demux_pipeline']['wet_lab_file_cols']
    set_num=wet_lab_df.loc[wet_lab_df[cols2[1]].str.lower() == samp.lower(), cols2[0]].values[0]
    col=wildcards.vcf_type

    return temp_df.loc[temp_df[cols1[0]] == set_num, col].values[0]


rule create_inp_cellSNP:
    input:
        f"{config['demux_pipeline']['final_count_matrix_dir']}{config['fold_struct_demux']}{config['demux_pipeline']['final_count_matrix_h5ad']}"

    priority: 8

    params:
        col_name=config['phe_demux_pipeline']['demux_col'], # Name of the anndata's obs column that contains classification of cells
        bc_len=config['phe_demux_pipeline']['barcode_len'], # Barcode length
        keep_all_cells=config['phe_demux_pipeline']['include_all_cells'],
        doub=config['phe_demux_pipeline']['doublet'], # Doublets classified as
        neg=config['phe_demux_pipeline']['negative'], # Negatives classified as
        na=config['phe_demux_pipeline']['na'] # Cells not present in hashsolo classified as

    resources:
        mem_mb=allocate_mem_CICS,
        time_min=allocate_time_CICS

    # group: "phenotype-demux"

    output:
        f"{config['phe_demux_pipeline']['inp_for_cellsnp_dir']}{config['fold_struct_filt_bc']}.txt"

    shell:
        """
        if [[ "{params.keep_all_cells}" == "yes" ]] || [[ "{params.keep_all_cells}" == "True" ]]; then
            python3 helper_py_scripts/create_inp_cellSNP.py {input} -o {output} -c {params.col_name} -b {params.bc_len} --keep_all_cells
        else
            python3 helper_py_scripts/create_inp_cellSNP.py {input} -o {output} -c {params.col_name} -e {params.na} -d {params.doub} -n {params.neg} -b {params.bc_len}
        fi
        sleep 100
        """


# Not yet finished implementing
rule get_id_hash:
    input:


    output:
        config['phe_demux_pipeline']['meta_data_geno_samp']

    shell:
        """
        sleep 100
        """


# UMI tag is turned on. Therefore, PCR duplicates are included
rule cellSNP:
    input:
        # bc=get_filt_barcodes,
        bc=f"{config['phe_demux_pipeline']['inp_for_cellsnp_dir']}{config['fold_struct_filt_bc']}.txt",
        bams=f"{config['STARsolo_pipeline']['bams_dir']}{config['fold_struct']}{config['STARsolo_pipeline']['bam']}",
        ref_snps=multi_vcfs,
        genome_1k_ref=config['phe_demux_pipeline']['genome_1k_ref']

    # group: "phenotype-demux"

    output:
        f"{config['phe_demux_pipeline']['cellsnp_dir']}{config['fold_struct_phe_demux']}{config['phe_demux_pipeline']['cellsnp_cells']}",
        f"{config['phe_demux_pipeline']['cellsnp_dir']}{config['fold_struct_phe_demux']}{config['phe_demux_pipeline']['cellsnp_base']}"

    params:
        # ref_snps=config['phe_demux_pipeline']['ref_snps'],
        umi_tag=config['phe_demux_pipeline']['umi_tag'],
        cell_tag=config['phe_demux_pipeline']['cell_tag'],
        processors=config['phe_demux_pipeline']['n_proc'],
        min_maf=config['phe_demux_pipeline']['min_maf'],
        min_ct=config['phe_demux_pipeline']['min_aggr_count'],
        output_prefix=lambda wildcards, output: output[0].replace(f"/{config['phe_demux_pipeline']['cellsnp_cells']}", ''),
        filt_vcf_dir=f"{config['phe_demux_pipeline']['filt_vcf_dir']}{config['fold_struct_phe_demux']}"[:-1], # remove trailing forward slash
        threads=config['phe_demux_pipeline']['bcftools_thread']

    threads: 1

    resources:
        mem_mb=allocate_mem_cS,
        time_min=allocate_time_cS

    shell:
        """
        ml bcftools/1.15.1
        bcftools isec --threads {params.threads} -e- -i'INFO/AF>0.25' -Oz -p {params.filt_vcf_dir} {input.ref_snps} {input.genome_1k_ref}
        cellsnp-lite -s {input.bams} -b {input.bc} -O {params.output_prefix} -R {params.filt_vcf_dir}"/0002.vcf.gz" -p {params.processors} --minMAF {params.min_maf} --minCOUNT {params.min_ct} --cellTAG {params.cell_tag} --UMItag {params.umi_tag} --genotype --gzip
        """


rule vireoSNP:
    input:
        f"{config['phe_demux_pipeline']['cellsnp_dir']}{config['fold_struct_phe_demux']}{config['phe_demux_pipeline']['cellsnp_cells']}"
        
    output:
        f"{config['phe_demux_pipeline']['vireosnp_dir']}{config['fold_struct_phe_demux']}{config['phe_demux_pipeline']['donors_classification']}"


    # group: "phenotype-demux"

    params:
        donor_info=get_donors,
        geno_tag=config['phe_demux_pipeline']['donor_genotype'],
        output_prefix=lambda wildcards, output: output[0].replace(f"/{config['phe_demux_pipeline']['donors_classification']}", '')

    threads: 5

    resources:
        mem_mb=allocate_mem_vS,
        time_min=allocate_time_vS
        
    shell: "vireo -c {input} -d {params.donor_info[vcf]} -N 6 -o {params.output_prefix} -t {params.geno_tag} --noPlot --randSeed 100"
