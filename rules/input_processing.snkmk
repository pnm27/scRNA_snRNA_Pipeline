# Limitting Step for the run of Snakemake, creating wildcards

# If the input is a text file containing the folder structure to the fastqs
if os.path.isfile(config['select_fastqs']) and not config['select_fastqs'].endswith('.yaml') and not config['select_fastqs'].endswith('.yml'):
    #Lists that will contain wildcards
    round_num=[] # wildcard 'num'
    sample_name=[] # wildcard 'id1'
    with open(config['select_fastqs']) as fq:
        for line in fq:
            line_sp = line.split('/')
            round_num.append(line_sp[0])
            sample_name.append(line_sp[2].strip().replace('-cDNA', ''))

# If the input is yaml file then validate it and process it
elif config['select_fastqs'].endswith('.yaml') or config['select_fastqs'].endswith('.yml'):

    # Parse the yaml file
    with open(workflow.source_path("../resources/presets.yaml")) as fout:
        sample_dict = yaml.load(fout, Loader=yaml.SafeLoader)

    module_list = []
    files_list=[] # List of list
    wildcards_list=[] # List of list

    # Check if the yaml file has list of inputs or regex patterns
    for k, v in sample_dict.keys():
        module_list.append(k)

        



    pass

# If the input is a dir containing all the fastqs
elif os.path.isdir(config['select_fastqs']):

else:
    raise ValueError("Unrecognized input file! Can't go ahead with the pipeline!")


# Create a dict of wildcards
wc_d={'id1':sample_name}

# For multiruns of cellSNP and vireoSNP
# VCF_TYPE=config['phe_demux_pipeline']['vcf_info_columns'][2:]