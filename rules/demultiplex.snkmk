def get_inputs_demux(wildcards):
    ret_dict={}
    if ONLY_SOLO:
        ret_dict['calico_solo_out'] = f"{config['demux_pipeline']['calico_solo_dir']}{config['fold_struct_demux']}{config['demux_pipeline']['calico_solo_h5ad']}"
    elif ONLY_VIREO:
        ret_dict['vireoSNP_out'] = f"{config['phe_demux_pipeline']['vireosnp_dir']}{config['fold_struct_phe_demux']}{wildcards.vcf_type}/{config['phe_demux_pipeline']['donors_classification']}"
    elif BOTH_DEMUX:
        ret_dict['calico_solo_out'] = f"{config['demux_pipeline']['calico_solo_dir']}{config['fold_struct_demux']}{config['demux_pipeline']['calico_solo_h5ad']}"
        ret_dict['vireoSNP_out'] = f"{config['phe_demux_pipeline']['vireosnp_dir']}{config['fold_struct_phe_demux']}{wildcards.vcf_type}/{config['phe_demux_pipeline']['donors_classification']}"
    else:
        raise ValueError("Unexpected inputs to the rule 'demux_samples_calico_solo_STARsolo'! Please check the INPUTS and the FLAGS!")

    return ret_dict


rule demux_samples_calico_solo_STARsolo:
    input:
        starsolo_out=f"{config['STARsolo_pipeline']['bams_dir']}{config['fold_struct']}{config['STARsolo_pipeline']['genefull_matrix']}",
        **get_inputs_demux()
        

    # priority: 8

    output:
        f"{config['demux_pipeline']['final_count_matrix_dir']}{config['fold_struct_demux']}{config['demux_pipeline']['final_count_matrix_h5ad']}",
        f"{config['demux_pipeline']['demultiplex_info_dir']}{config['fold_struct_demux']}{config['demux_pipeline']['demultiplex_info']}"

    params:
        mito=config['demux_pipeline']['max_mito_percentage'],  # Max mitochodrial genes content per cell
        min_genes=config['demux_pipeline']['min_genes_per_cell'], # Min #genes per cell
        min_cells=config['demux_pipeline']['min_cells_per_gene'],  # Min #cells expressing a gene for it to pass the filter
        samples_info=config['wet_lab_info'], # File containing multiplexing info of each set
        cols=config['demux_pipeline']['columns_to_pick'],  # Which columns of the wet lab info file correspond RESPECTIVELY to cDNA_ID(should correspond to the name of the processed file), HTO numbers and Donors/SubIDs (Header names and not numbers)
        genes_info=config['demux_pipeline']['gene_info_file'], # File containing gene names and gene ids for annotations
        sample_name="{id1}",
        hto_sep=config['demux_pipeline']['hto_sep']

    
    resources:
        mem_mb=allocate_mem_DXP,
        time_min=allocate_time_DXP

    run:
        if ONLY_SOLO:
            shell(
            """
            samp={params.sample_name}
            if [[ "{params.hto_sep}" == "None" ]]; then
                python3 helper_py_scripts/demul_samples.py {input[0]} {input[1]} {output[0]} {output[1]} {params.genes_info} {params.samples_info} -m {params.mito} -g {params.min_genes} -c {params.min_cells} --columns {params.cols} \
            -s {params.sample_name}
            else
                python3 helper_py_scripts/demul_samples.py {input[0]} {input[1]} {output[0]} {output[1]} {params.genes_info} {params.samples_info} -m {params.mito} -g {params.min_genes} -c {params.min_cells} --columns {params.cols} \
            -s {params.sample_name} --hto_sep {params.hto_sep}
            fi
            sleep 100
            """
            )



# If a previous run of the pipeline has produced final_count_matrix using solo
# To add results of
rule add_obs_to_final_count_matrix:
    input:
        f"{config['demux_pipeline']['final_count_matrix_dir']}{config['fold_struct_demux']}{config['demux_pipeline']['final_count_matrix_h5ad']}",
        f"{config['phe_demux_pipeline']['vireosnp_dir']}{config['fold_struct_phe_demux']}{{vcf_type}}/{config['phe_demux_pipeline']['donors_classification']}",
        config['split_bams_pipeline_phe_demux']['gt_conv']

    output:
        f"{config['phe_demux_pipeline']['final_count_matrix_dir']}{config['fold_struct_demux']}_{{vcf_type}}{config['phe_demux_pipeline']['final_count_matrix_h5ad']}"

    resources:
        mem_mb=allocate_mem_AOTFCM,
        time_min=allocate_time_AOTFCM

    shell:
        """
        python3 helper_py_scripts/demul_samples_ext_vS.py {input[0]} {input[1]} {input[2]} {output}
        sleep 100
        """