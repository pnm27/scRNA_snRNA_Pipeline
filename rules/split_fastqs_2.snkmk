rule create_inp_splitBams:
    input:
        f"{config['demux_pipeline']['final_count_matrix_dir']}{config['fold_struct_demux']}{config['demux_pipeline']['final_count_matrix_h5ad']}"

    priority: 7

    output:
        f"{config['split_bams_pipeline']['inp_split_bams_dir']}{config['fold_struct_bam_split1']}_bc_hash.txt"

    params:
        overwrite=config['split_bams_pipeline']['overwrite']

    group: "split_bams"

    threads: 2

    resources:
        mem_mb=10000

    shell:
        """
        if [ "{params.overwrite}" == True ]; then
            python3 helper_py_scripts/create_inp_splitBam.py {input} {output} --overwrite

        else
            python3 helper_py_scripts/create_inp_splitBam.py {input} {output}

        fi
        sleep 60
        """


rule bamsort_by_CB:
    input:
        f"{config['STAR_solo_pipeline']['bams_dir']}{config['fold_struct']}{config['STAR_solo_pipeline']['bam']}"

    output:
        f"{config['STAR_solo_pipeline']['bams_dir']}{config['fold_struct']}{config['split_bams_pipeline']['sort_cb_bam']}"

    params:
        temp_pref=f"{config['split_bams_pipeline']['sort_temp_dir']}{{num}}_{{id1}}"

    group: "split_bams"

    threads: 5

    resources:
        mem_mb=20000

    shell:
        """
        mkdir -p {config[split_bams_pipeline][sort_temp_dir]}
        ml samtools
        # samtools view -h {input} | grep -E "^@|CB:Z:[ATGCN]+" | samtools view -b - | samtools sort -@ 12 -t CB -o {output} -T {params.temp_pref} -
        samtools sort -@ 12 -t CB -T {params.temp_pref} {input} | samtools view -h - | grep -E "^@|CB:Z:[ATGCN]+" | samtools view -b - > {output}
        """


# This rule will always overwrite the files (i.e. even if certain barcodes are already produced and present in the output folder, this script will overwrite them)
# This is much more efficient in the long run
rule prep_split_bams:
    input:
        bam=f"{config['STAR_solo_pipeline']['bams_dir']}{config['fold_struct']}{config['split_bams_pipeline']['sort_cb_bam']}"

    priority: 7

    params:
        # output_pref=f"{config['split_bams_pipeline']['bams_per_barcode_dir']}{config['fold_struct']}_"
        temp_bam_per_cell_dir=f"{config['split_bams_pipeline']['bams_per_barcode_dir']}{config['fold_struct_bam_split2']}" # Directory where each barcode per sample is kept until merged into per 'donor', per sample

    group: "split_bams"

    threads: 4

    resources:
        mem_mb=30000

    output:
        f"{config['split_bams_pipeline']['split_bams_script_dir']}{config['fold_struct_bam_split1']}.sh", # This is the shell script which will split the bams (practically, sam)
        f"{config['STAR_solo_pipeline']['bams_dir']}{config['fold_struct']}{config['split_bams_pipeline']['sam']}",
        f"{config['split_bams_pipeline']['reads_v_barcodes_dir']}{config['fold_struct_bam_split1']}.txt" # This is the 'txt' files containing barcode and reads associated with it

    shell:
        """
        bash helper_sh_scripts/split_bam_indiv_barc_samtools_4.sh {input.bam} {output[2]} {output[0]} {params.temp_bam_per_cell_dir}
        sleep 60
        """


rule split_bams:
    input:
        f"{config['split_bams_pipeline']['split_bams_script_dir']}{config['fold_struct_bam_split1']}.sh",
        sam=f"{config['STAR_solo_pipeline']['bams_dir']}{config['fold_struct']}{config['split_bams_pipeline']['sam']}",
        barcodes_vs_donor=f"{config['split_bams_pipeline']['inp_split_bams_dir']}{config['fold_struct_bam_split1']}_bc_hash.txt"

    priority: 7

    params:
        split_at=config['split_bams_pipeline']['bc_per_donor'], # Split barcodes if more than this number belonging to the same donor (can't merge files more than what specified by `ulimit -n`)
        # temp_dir=f"{config['split_bams_pipeline']['temp_dir']}",
        temp_bam_per_cell_dir=f"{config['split_bams_pipeline']['bams_per_barcode_dir']}{config['fold_struct_bam_split2']}",
        split_bams_dir=f"{config['split_bams_pipeline']['split_bams_dir']}{config['fold_struct_bam_split2']}"

    group: "split_bams"

    threads: 5

    resources:
        mem_mb=30000

    output:
        f"{config['split_bams_pipeline']['split_bams_proxy_dir']}{config['fold_struct_bam_split1']}.txt"  # Proxy to the output

    shell:
        """
        bash {input[0]} &> {output}
        bash helper_sh_scripts/create_bams_per_donor.sh {input.barcodes_vs_donor} {params.split_bams_dir} {params.temp_bam_per_cell_dir} {params.split_at} >> {output} 2>&1
        sleep 60
        """
