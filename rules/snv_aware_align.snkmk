def get_vcf_id(wildcards):
    df = pd.read_csv(config['STARsolo_snv_aware']['vcf_id_donor_id_hash'])
    return df.loc[df[config['STARsolo_snv_aware']['hash_columns'][0]] == wildcards.donors, config['STARsolo_snv_aware']['hash_columns'][1]].values[0]


rule create_per_donor_vcf:
    input:
        pooled_vcf=config['STARsolo_snv_aware']['genotypes_vcf']
        
    params:
        vcf_id=get_vcf_id,
        vcf_gzipped=lambda wildcards, input: input.pooled_vcf.endswith('.gz') or input.pooled_vcf.endswith('.gzip')

    output:
        temp(f"{config['STARsolo_snv_aware']['temp_genotypes_vcf_dir']}{config['fold_struct_vcf']}{{donors}}{config['STARsolo_snv_aware']['vcf_suffix']}")

    resources:
        mem_mb=allocate_mem_CPDV,
        time_min=allocate_time_CPDV,
        attempt=lambda wildcards, attempt: attempt

    shell:
        """
        ml bcftools
        if [[ "{params.vcf_gzipped}" == "True" ]]; then
            bcftools view --threads 12 -s {params.vcf_id} {input.pooled_vcf} -Oz > {output}
        else
            bcftools view --threads 12 -O z -o {input.pooled_vcf}".gz" {input.pooled_vcf}
            bcftools view --threads 12 -s {params.vcf_id} {input.pooled_vcf}".gz" -Oz > {output}
        fi

        """



rule shuf_donor_bam:
    input:
        donor_bam=f"{config['split_bams_pipeline']['split_bams_dir']}{config['fold_struct_bam_split2']}{{donors}}.bam"

    output:
        temp(f"{config['split_bams_pipeline']['split_bams_dir']}{config['fold_struct_bam_split2']}{{donors}}_shuff.bam")

    resources:
        mem_mb=allocate_mem_SDB,
        time_min=allocate_time_SDB

    shell:
        """
        ml samtools
        samtools collate -@ 12 -o {output} {input}
        """



rule STARsolo_SNV_aware_sort:
    input:
        shuff_donor_bam=f"{config['split_bams_pipeline']['split_bams_dir']}{config['fold_struct_bam_split2']}{{donors}}_shuff.bam",
        sample_vcf=f"{config['STARsolo_snv_aware']['temp_genotypes_vcf_dir']}{config['fold_struct_vcf']}{{donors}}{config['STARsolo_snv_aware']['vcf_suffix']}"

    # priority: 10

    params:
        gtf=config['gtf_file'],
        genome_dir=config['STARsolo_snv_aware']['genome_dir'],
        overhang=config['STARsolo_snv_aware']['sjdboverhang'],
        chemistry=config['STARsolo_snv_aware']['soloType'], # For STARsolo
        whitelist=config['whitelist'], # V3 whitelist
        UMI_length=config['STARsolo_snv_aware']['umi_len'], # V3 
        SAM_attr=config['STARsolo_snv_aware']['SAM_attr'],
        features=config['STARsolo_snv_aware']['features'],
        solo_cell_filter=config['STARsolo_snv_aware']['solo_cell_filter'],
        out_pref=f"{config['STARsolo_snv_aware']['bams_dir']}{config['fold_struct_snv_aware']}{{donors}}/{{donors}}_",
        # count_matrix_dir=lambda wildcards, output: output[8][:-13],
        vcf_gzipped=lambda wildcards, input: input.sample_vcf.endswith('.gz') or input.sample_vcf.endswith('.gzip')


    output:
        f"{config['STARsolo_snv_aware']['bams_dir']}{config['fold_struct_snv_aware']}{{donors}}/{{donors}}{config['STARsolo_snv_aware']['bam']}",
        f"{config['STARsolo_snv_aware']['bams_dir']}{config['fold_struct_snv_aware']}{{donors}}/{{donors}}{config['STARsolo_snv_aware']['bai']}"
        # f"{config['STARsolo_snv_aware']['bams_dir']}{config['fold_struct']}{config['STARsolo_snv_aware']['STAR_log_final']}",
        # f"{config['STARsolo_snv_aware']['bams_dir']}{config['fold_struct']}{config['STARsolo_snv_aware']['genefull_features']}",
        # f"{config['STARsolo_snv_aware']['bams_dir']}{config['fold_struct']}{config['STARsolo_snv_aware']['genefull_summary']}",
        # f"{config['STARsolo_snv_aware']['bams_dir']}{config['fold_struct']}{config['STARsolo_snv_aware']['gene_features']}",
        # f"{config['STARsolo_snv_aware']['bams_dir']}{config['fold_struct']}{config['STARsolo_snv_aware']['gene_summary']}",
        # f"{config['STARsolo_snv_aware']['bams_dir']}{config['fold_struct']}{config['STARsolo_snv_aware']['barcodes_stats']}",
        # f"{config['STARsolo_snv_aware']['bams_dir']}{config['fold_struct']}{config['STARsolo_snv_aware']['genefull_matrix']}"

    log:
        f"{config['STARsolo_snv_aware']['bams_dir']}{config['fold_struct_snv_aware']}{{donors}}/{{donors}}_STARsolo_log.txt"
   
    resources:
        mem_mb=allocate_mem_SSSA,
        time_min=allocate_time_SSSA,
        attempt=lambda wildcards, attempt: attempt

    threads: 6

    run:
        shell(
        """
        ml {config[STAR_snv_aware_version]}
        ml samtools
        if [[ "{params.vcf_gzipped}" == "True" ]]; then
            STAR --genomeDir {params.genome_dir} --sjdbGTFfile {params.gtf} --sjdbOverhang {params.overhang} --twopassMode Basic --readFilesCommand samtools view --readFilesIn {input.shuff_donor_bam} --readFilesType SAM SE \
            --soloType {params.chemistry} --soloUMIlen {params.UMI_length} --soloCBwhitelist {params.whitelist} --soloFeatures {params.features} --soloCellFilter {params.solo_cell_filter} --outSAMattributes {params.SAM_attr} \
            --outSAMtype BAM SortedByCoordinate --runThreadN 12 --soloInputSAMattrBarcodeSeq CR UR --readFilesSAMattrKeep None --waspOutputMode SAMtag --varVCFfile <(zcat {input.sample_vcf} | sed -E -r 's/chr([A-Za-z0-9]+)/\\1/g') \
            --outFileNamePrefix {params.out_pref} &> {log}_{resources.attempt}
        else
            STAR --genomeDir {params.genome_dir} --sjdbGTFfile {params.gtf} --sjdbOverhang {params.overhang} --twopassMode Basic --readFilesCommand samtools view --readFilesIn {input.shuff_donor_bam} --readFilesType SAM SE \
            --soloType {params.chemistry} --soloUMIlen {params.UMI_length} --soloCBwhitelist {params.whitelist} --soloFeatures {params.features} --soloCellFilter {params.solo_cell_filter} --outSAMattributes {params.SAM_attr} \
            --outSAMtype BAM SortedByCoordinate --runThreadN 12 --soloInputSAMattrBarcodeSeq CR UR --readFilesSAMattrKeep None --waspOutputMode SAMtag --varVCFfile {input.sample_vcf} --outFileNamePrefix {params.out_pref} &> {log}_{resources.attempt}
        fi
        samtools index {output[0]}
        """
        )