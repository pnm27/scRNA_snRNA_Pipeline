rule run_calico_solo:
    input:
        f"{config['demux_pipeline']['h5ad_bustools_dir']}{config['fold_struct_demux']}{config['demux_pipeline']['bustools_h5ad']}",
        starsolo_out=f"{config['STARsolo_pipeline']['bams_dir']}{config['fold_struct']}{config['STARsolo_pipeline']['genefull_matrix']}" #get_STARsolo_mat

    # priority: 8
   
    output:
        f"{config['demux_pipeline']['calico_solo_dir']}{config['fold_struct_demux']}{config['demux_pipeline']['calico_solo_h5ad']}"
  
    params:
        mito=config['demux_pipeline']['max_mito_percentage'],  # Max mitochodrial genes content per cell
        min_genes=config['demux_pipeline']['min_genes_per_cell'], # Min #genes per cell
        min_cells=config['demux_pipeline']['min_cells_per_gene'],  # Min #cells expressing a gene for it to pass the filter
        genes_info=config['demux_pipeline']['gene_info_file'], # File containing gene names and gene ids for annotations
        mito_prefix=config['demux_pipeline']['mito_prefix'] # Mitochondrial genes' (names') prefix

    threads: 2

    resources:
        mem_mb=allocate_mem_RCS,
        time_min=allocate_time_RCS

    shell: 
        """
        python3 helper_py_scripts/create_h5ad_from_calico_solo.py {input[0]} {input[1]} {output} {params.genes_info} -m {params.mito} -g {params.min_genes} -c {params.min_cells} --mito_prefix {params.mito}
        sleep 100
        """


# SUCCEEDED BY THE MODULE DEMULTIPLEX_NO_ARGP
# rule demux_samples_calico_solo_STARsolo:
#     input:
#         f"{config['demux_pipeline']['calico_solo_dir']}{config['fold_struct_demux']}{config['demux_pipeline']['calico_solo_h5ad']}",
#         starsolo_out=f"{config['STARsolo_pipeline']['bams_dir']}{config['fold_struct']}{config['STARsolo_pipeline']['genefull_matrix']}"

#     # priority: 8

#     output:
#         f"{config['demux_pipeline']['final_count_matrix_dir']}{config['fold_struct_demux']}{config['demux_pipeline']['final_count_matrix_h5ad']}",
#         f"{config['demux_pipeline']['demultiplex_info_dir']}{config['fold_struct_demux']}{config['demux_pipeline']['demultiplex_info']}"

#     params:
#         mito=config['demux_pipeline']['max_mito_percentage'],  # Max mitochodrial genes content per cell
#         min_genes=config['demux_pipeline']['min_genes_per_cell'], # Min #genes per cell
#         min_cells=config['demux_pipeline']['min_cells_per_gene'],  # Min #cells expressing a gene for it to pass the filter
#         samples_info=config['wet_lab_info'], # File containing multiplexing info of each set
#         cols=config['demux_pipeline']['columns_to_pick'],  # Which columns of the wet lab info file correspond RESPECTIVELY to cDNA_ID(should correspond to the name of the processed file), HTO numbers and Donors/SubIDs (Header names and not numbers)
#         genes_info=config['demux_pipeline']['gene_info_file'], # File containing gene names and gene ids for annotations
#         sample_name="{id1}",
#         hto_sep=config['demux_pipeline']['hto_sep']

    
#     resources:
#         mem_mb=allocate_mem_DXP,
#         time_min=allocate_time_DXP

#     shell:
#         """
#         samp={params.sample_name}
#         if [[ "{params.hto_sep}" == "None" ]]; then
#             python3 helper_py_scripts/demul_samples.py {input[0]} {input[1]} {output[0]} {output[1]} {params.genes_info} {params.samples_info} -m {params.mito} -g {params.min_genes} -c {params.min_cells} --columns {params.cols} \
#         -s {params.sample_name}
#         else
#             python3 helper_py_scripts/demul_samples.py {input[0]} {input[1]} {output[0]} {output[1]} {params.genes_info} {params.samples_info} -m {params.mito} -g {params.min_genes} -c {params.min_cells} --columns {params.cols} \
#         -s {params.sample_name} --hto_sep {params.hto_sep}
#         fi
#         sleep 100
#         """

        